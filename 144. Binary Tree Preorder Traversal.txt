144. Binary Tree Preorder Traversal
Solved
Easy
Topics
Companies
Given the root of a binary tree, return the preorder traversal of its nodes' values.

 

Example 1:

Input: root = [1,null,2,3]

Output: [1,2,3]

Explanation:



Example 2:

Input: root = [1,2,3,4,5,null,8,null,null,6,7,9]

Output: [1,2,4,5,6,7,3,8,9]

Explanation:



Example 3:

Input: root = []

Output: []

Example 4:

Input: root = [1]

Output: [1]

 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
 
code:

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> l1=new ArrayList<>();
        pre(root,l1);
        return l1;
    }
    public void pre(TreeNode root,List<Integer> l1){
        if(root==null){
            return ;
        }
        l1.add(root.val);
        pre(root.left,l1);
        pre(root.right,l1);
    }
}

or 

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> l1=new ArrayList<>();
        Stack<TreeNode> q=new Stack<>();
        if(root!=null){
            q.add(root);
        }

        while(!q.isEmpty()){
            TreeNode node=q.pop();
            l1.add(node.val);
            if(node.right!=null){
                q.push(node.right);
            }
            if(node.left!=null){
                q.push(node.left);
            }
        }
        return l1;
    }
}