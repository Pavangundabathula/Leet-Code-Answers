743. Network Delay Time
Solved
Medium
Topics
premium lock icon
Companies
Hint
You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.

 

Example 1:


Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2
Example 2:

Input: times = [[1,2,1]], n = 2, k = 1
Output: 1
Example 3:

Input: times = [[1,2,1]], n = 2, k = 2
Output: -1
 

Constraints:

1 <= k <= n <= 100
1 <= times.length <= 6000
times[i].length == 3
1 <= ui, vi <= n
ui != vi
0 <= wi <= 100
All the pairs (ui, vi) are unique. (i.e., no multiple edges.)

Code:

class Pair{
    int node;
    int dis;
    public Pair(int node,int dis){
        this.node=node;
        this.dis=dis;
    }
}

class Solution {
    public int networkDelayTime(int[][] time, int n, int k) {
        List<List<Pair>> list=new ArrayList<>();

        for(int i=0;i<n;i++){
            list.add(new ArrayList<>());
        }

        for(int i=0;i<time.length;i++){
            list.get(time[i][0]-1).add(new Pair(time[i][1],time[i][2]));
        }

        int[] wt=new int[n];
        Arrays.fill(wt,Integer.MAX_VALUE);
        wt[k-1]=0;

        PriorityQueue<Pair> pq=new PriorityQueue<>((a,b)-> a.dis-b.dis);

        pq.add(new Pair(k,0));

        while(!pq.isEmpty()){
            Pair obj=pq.remove();
            int node=obj.node;
            int dis=obj.dis;

            for(Pair ob:list.get(node-1)){
                int val=ob.node;
                int di=ob.dis;

                if(dis+di<wt[val-1]){
                    wt[val-1]=dis+di;
                    pq.add(new Pair(val,wt[val-1]));
                }
            }
        }
        int sum=0;

        for(int i:wt){
            if(i==Integer.MAX_VALUE){
                return -1;
            }
            sum=Math.max(sum,i);
        }
        return sum;
    }
}