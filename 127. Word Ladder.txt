127. Word Ladder
Solved
Hard
Topics
Companies
A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 

Constraints:

1 <= beginWord.length <= 10
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.

Code:

class Pair{
    String word;
    int st;
    public Pair(String word,int st){
        this.word=word;
        this.st=st;
    }
}
class Solution {
    public int ladderLength(String startWord, String targetWord, List<String> wordList) {
        Queue<Pair> q=new LinkedList<>();
        Set<String> set=new HashSet<>();
        if(!wordList.contains(targetWord)){
            return 0;
        }
        for(int i=0;i<wordList.size();i++){
            set.add(wordList.get(i));
        }
        
        q.add(new Pair(startWord,1));
        set.remove(startWord);
        
        while(!q.isEmpty()){
            Pair obj=q.remove();
            String word=obj.word;
            int st=obj.st;
            if(word.equals(targetWord)){
                return st;
            }
        
            for(int i=0;i<word.length();i++){
                for(char ch='a';ch<='z';ch++){
                    char[] arr=word.toCharArray();
                    arr[i]=ch;
                    String str=new String(arr);
                    if(set.contains(str)==true){
                        set.remove(str);
                        q.add(new Pair(str,st+1));
                    }
                }
            }
        }
        
        return 0;
    }
}