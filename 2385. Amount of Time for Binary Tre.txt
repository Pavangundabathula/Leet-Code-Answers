2385. Amount of Time for Binary Tree to Be Infected
Solved
Medium
Topics
premium lock icon
Companies
Hint
You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.

Each minute, a node becomes infected if:

The node is currently uninfected.
The node is adjacent to an infected node.
Return the number of minutes needed for the entire tree to be infected.

 

Example 1:


Input: root = [1,5,3,null,4,10,6,9,2], start = 3
Output: 4
Explanation: The following nodes are infected during:
- Minute 0: Node 3
- Minute 1: Nodes 1, 10 and 6
- Minute 2: Node 5
- Minute 3: Node 4
- Minute 4: Nodes 9 and 2
It takes 4 minutes for the whole tree to be infected so we return 4.
Example 2:


Input: root = [1], start = 1
Output: 0
Explanation: At minute 0, the only node in the tree is infected so we return 0.
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
1 <= Node.val <= 105
Each node has a unique value.
A node with a value of start exists in the tree.

code:
class Solution {
    public int amountOfTime(TreeNode root, int start) {
        Map<TreeNode,TreeNode> map=new HashMap<>();
        Queue<TreeNode> q=new LinkedList<>();
        TreeNode t=null;
        q.add(root);
        map.put(root,null);
        while(!q.isEmpty()){
            TreeNode temp=q.remove();
            if(temp.val==start){
                t=temp;
            }
            if(temp.left!=null){
                q.add(temp.left);
                map.put(temp.left,temp);
            }
            if(temp.right!=null){
                q.add(temp.right);
                map.put(temp.right,temp);
            }
        }

        q.add(t);
        HashSet<TreeNode> set=new HashSet<>();
        set.add(t);
        int index=0;
        while(!q.isEmpty()){
            int n=q.size();
            index++;
            for(int i=0;i<n;i++){
                TreeNode node=q.remove();
                if(node.left!=null && !set.contains(node.left)){
                    q.add(node.left);
                    set.add(node.left);
                }
                if(node.right!=null && !set.contains(node.right)){
                    q.add(node.right);
                    set.add(node.right);
                }
                TreeNode parent=map.get(node);
                if(parent!=null && !set.contains(parent)){
                    q.add(parent);
                    set.add(parent);
                }
            }
        }
        return index-1;
    }
}