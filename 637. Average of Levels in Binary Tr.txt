637. Average of Levels in Binary Tree
Solved
Easy
Topics
Companies
Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted.
 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [3.00000,14.50000,11.00000]
Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.
Hence return [3, 14.5, 11].
Example 2:


Input: root = [3,9,20,15,7]
Output: [3.00000,14.50000,11.00000]
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1

Code:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 import java.util.*;
class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> result=new ArrayList<>();
        if(root==null){
            return result;
        }
        Queue<TreeNode> queue=new LinkedList<>();
        queue.offer(root);
        result.add((double) root.val);
        while(!queue.isEmpty()){
            int levelSize=queue.size();
            double averageLevel=0;
            int count=0;
            boolean isadd=false;
            for(int i=0;i<levelSize;i++){
                TreeNode curr=queue.poll();
                if(curr.left!=null){
                   averageLevel+=curr.left.val;
                   queue.offer(curr.left);
                   isadd=true;
                   count++; 
                }
                if(curr.right!=null){
                    averageLevel+=curr.right.val;
                    queue.offer(curr.right);
                    isadd=true;
                    count++;
                }
            }
            
            if(isadd){
                result.add((double) averageLevel/count);
            }
        }
        return result;
    }
}