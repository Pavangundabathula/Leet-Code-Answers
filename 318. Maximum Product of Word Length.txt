318. Maximum Product of Word Lengths
Solved
Medium
Topics
Companies
Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.

 

Example 1:

Input: words = ["abcw","baz","foo","bar","xtfn","abcdef"]
Output: 16
Explanation: The two words can be "abcw", "xtfn".
Example 2:

Input: words = ["a","ab","abc","d","cd","bcd","abcd"]
Output: 4
Explanation: The two words can be "ab", "cd".
Example 3:

Input: words = ["a","aa","aaa","aaaa"]
Output: 0
Explanation: No such pair of words.
 

Constraints:

2 <= words.length <= 1000
1 <= words[i].length <= 1000
words[i] consists only of lowercase English letters.


Code:

class Solution {
    public int maxProduct(String[] words) {
        int[] arr=new int[26];
        int ans=0;
        for(int i=0;i<words.length;i++){
            for(int j=i+1;j<words.length;j++){
                boolean is=true;
                for(int k=0;k<words[i].length();k++){
                    char ch=words[i].charAt(k);
                    int index=(int)ch-'a';
                    arr[index]++;
                }
                for(int k=0;k<words[j].length();k++){
                    char ch=words[j].charAt(k);
                    int index=(int)ch-'a';
                    if(arr[index]>0){
                        is=false;
                        break;
                    }
                }
                Arrays.fill(arr,0);
                if(is){
                    ans=Math.max(ans,words[i].length()*words[j].length());
                }
            }
        }
        return ans;
    }
}