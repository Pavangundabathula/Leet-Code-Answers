994. Rotting Oranges
Solved
Medium
Topics
Companies
You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 10
grid[i][j] is 0, 1, or 2.

Code:

class Pair{
    int row;
    int col;
    int time;
    public Pair(int row,int col,int time){
        this.row=row;
        this.col=col;
        this.time=time;
    }
}

class Solution {
    public int orangesRotting(int[][] grid) {
        int fresh=0;
        int count=0;
        Queue<Pair> q=new LinkedList<>();
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                if(grid[i][j]==1){
                    fresh++;
                }
                if(grid[i][j]==2){
                   q.offer(new Pair(i,j,1));
                }
            }
        }
        if(fresh==0){
            return 0;
        }
        
        while(!q.isEmpty()){
            Pair obj=q.poll();
            int row=obj.row;
            int col=obj.col;
            int time=obj.time;

            if(col-1>=0 && grid[row][col-1]==1){
                fresh--;
                grid[row][col-1]=2;
                q.offer(new Pair(row,col-1,time+1));
            }
            if(col+1<grid[row].length && grid[row][col+1]==1){
                fresh--;
                grid[row][col+1]=2;
                q.offer(new Pair(row,col+1,time+1));
            }
            if(row-1>=0 && grid[row-1][col]==1){
                fresh--;
                grid[row-1][col]=2;
                q.offer(new Pair(row-1,col,time+1));
            }
            if(row+1<grid.length && grid[row+1][col]==1 ){
                fresh--;
                grid[row+1][col]=2;
                q.offer(new Pair(row+1,col,time+1));
            }
            
            count=Math.max(count,time);

            if(fresh==0){
                break;
            }
        }
        
        return fresh==0?count:-1;
    }
}