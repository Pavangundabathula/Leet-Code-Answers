1192. Critical Connections in a Network
Solved
Hard
Topics
premium lock icon
Companies
Hint
There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some servers unable to reach some other server.

Return all critical connections in the network in any order.

 

Example 1:


Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.
Example 2:

Input: n = 2, connections = [[0,1]]
Output: [[0,1]]
 

Constraints:

2 <= n <= 105
n - 1 <= connections.length <= 105
0 <= ai, bi <= n - 1
ai != bi
There are no repeated connections.


Code:

class Solution {
    private int timer;
    public void dfs(int node,int parent,int[] vis,int[] tin,int[] low,List<List<Integer>> adj,List<List<Integer>> bridges){
        tin[node]=low[node]=timer;
        timer++;
        vis[node]=1;
        for(int num:adj.get(node)){
            if(num==parent) continue;

            if(vis[num]==0){
                dfs(num,node,vis,tin,low,adj,bridges);

                low[node]=Math.min(low[node],low[num]);

                if(low[num]>tin[node]){
                    bridges.add(Arrays.asList(node,num));
                }
            }else{
                low[node]=Math.min(low[node],low[num]);
            }
        }
    }

    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        List<List<Integer>> adj=new ArrayList<>();
        timer=0;
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }   

        for(int i=0;i<connections.size();i++){
            int u=connections.get(i).get(0);
            int v=connections.get(i).get(1);

            adj.get(u).add(v);
            adj.get(v).add(u);
        }

        int[] tin=new int[n];
        int[] low=new int[n];
        int[] vis=new int[n];
        List<List<Integer>> bridges=new ArrayList<>();
        dfs(0,-1,vis,tin,low,adj,bridges);

        return bridges;
    }
}