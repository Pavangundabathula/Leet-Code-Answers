802. Find Eventual Safe States
Solved
Medium
Topics
Companies
There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

 

Example 1:

Illustration of graph
Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]
Output: [2,4,5,6]
Explanation: The given graph is shown above.
Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.
Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.
Example 2:

Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]
Output: [4]
Explanation:
Only node 4 is a terminal node, and every path starting at node 4 leads to node 4.
 

Constraints:

n == graph.length
1 <= n <= 104
0 <= graph[i].length <= n
0 <= graph[i][j] <= n - 1
graph[i] is sorted in a strictly increasing order.
The graph may contain self-loops.
The number of edges in the graph will be in the range [1, 4 * 104].

Code:

class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {

        List<List<Integer>> adjList=new ArrayList<>();
        for(int i=0;i<graph.length;i++){
            adjList.add(new ArrayList<>());
        }
        
        for(int i=0;i<graph.length;i++){
            List<Integer> l1=adjList.get(i);
            for(int j=0;j<graph[i].length;j++){
                l1.add(graph[i][j]);
            }
        }
        
        return e(graph.length,adjList);
    }
    public List<Integer> e(int V, List<List<Integer>> adj) {
        List<Integer> l1=new ArrayList<>();
        int[] arr=new int[V];
        int[] vis=new int[V];
        int[] pvis=new int[V];
        for(int i=0;i<V;i++){
            if(vis[i]!=1){
                boolean b=dfs(i,adj,vis,pvis,arr);
            }
        }
        
        for(int i=0;i<V;i++){
            if(arr[i]==1){
                l1.add(i);
            }
        }
        return l1;
    }
    
    public boolean dfs(int num,List<List<Integer>> list,int[] v,int[] p,int[] a){
        v[num]=1;
        p[num]=1;
        for(int i:list.get(num)){
            if(v[i]!=1){
                v[i]=1;
                p[i]=1;
                if(dfs(i,list,v,p,a)==true){
                    return true;
                }
                p[i]=0;
            }else if(v[i]==1 && p[i]==1){
                return true;
            }
        }
        p[num]=0;
        a[num]=1;
        return false;
    }
}