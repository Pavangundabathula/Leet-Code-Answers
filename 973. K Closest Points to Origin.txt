973. K Closest Points to Origin
Solved
Medium
Topics
premium lock icon
Companies
Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).

The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

 

Example 1:


Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], k = 2
Output: [[3,3],[-2,4]]
Explanation: The answer [[-2,4],[3,3]] would also be accepted.
 

Constraints:

1 <= k <= points.length <= 104
-104 <= xi, yi <= 104

Code:

class Pair{
    int num;
    int index;
    public Pair(int num,int index){
        this.num=num;
        this.index=index;
    }
}
class Solution {
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<Pair> p = new PriorityQueue<>((a,b)-> a.num-b.num);
        for(int i=0;i<points.length;i++){
            int num=(int)((Math.pow(points[i][0],2))+(Math.pow(points[i][1],2)));
            p.add(new Pair(num,i));
        }
        int[][] ans=new int[k][2];
        for(int i=0;i<k;i++){
            Pair obj=p.poll();
            int in=obj.index;
            ans[i][0]=points[in][0];
            ans[i][1]=points[in][1];
        }
        return ans;
    }
}