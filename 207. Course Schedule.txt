207. Course Schedule
Solved
Medium
Topics
Companies
Hint
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
 

Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.

Code:

// comments part is the bfs method of topological sort
class Solution {
    public boolean canFinish(int num, int[][] pre) {
        return !isCyclic(num,pre);
    }
    public boolean isCyclic(int V,int[][] edges){
        List<List<Integer>> list=new ArrayList<>();

        for(int i=0;i<V;i++){
            list.add(new ArrayList<>());
        }
        // int[] indegree=new int[V];
        for(int i=0;i<edges.length;i++){
            list.get(edges[i][0]).add(edges[i][1]);
            // indegree[edges[i][1]]++;
        }

        // Queue<Integer> q=new LinkedList<>();
        // for(int i=0;i<V;i++){
        //     if(indegree[i]==0){
        //         q.add(i);
        //     }
        // }

        // int c=0;
        // while(!q.isEmpty()){
        //     int num=q.remove();
        //     c++;
        //     for(int i:list.get(num)){
        //         indegree[i]--;
        //         if(indegree[i]==0){
        //             q.add(i);
        //         }
        //     }
        // }

        // if(c==V) return false;

        // return true;

        int[] v=new int[V];
        int[] p=new int[V];

        for(int i=0;i<V;i++){
            if(v[i]!=1){
                if(dfs(i,list,v,p)==true){
                    return true;
                }
            }
        }
        return false;
    }

    public boolean dfs(int num,List<List<Integer>> list,int[] v,int[] p){
        v[num]=1;
        p[num]=1;

        for(int i:list.get(num)){
            if(v[i]!=1){
                dfs(i,list,v,p);
            }
            if(p[i]==1){
                return true;
            }
        }
        p[num]=0;
        return false;
    }
}