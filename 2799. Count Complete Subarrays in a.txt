2799. Count Complete Subarrays in an Array
Solved
Medium
Topics
Companies
Hint
You are given an array nums consisting of positive integers.

We call a subarray of an array complete if the following condition is satisfied:

The number of distinct elements in the subarray is equal to the number of distinct elements in the whole array.
Return the number of complete subarrays.

A subarray is a contiguous non-empty part of an array.

 

Example 1:

Input: nums = [1,3,1,2,2]
Output: 4
Explanation: The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].
Example 2:

Input: nums = [5,5,5,5]
Output: 10
Explanation: The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10.
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 2000

Code:

class Solution {
    public int countCompleteSubarrays(int[] nums) {
        int max=0;
        for(int i=0;i<nums.length;i++){
            max=Math.max(nums[i],max);
        }
        int[] arr=new int[max+1];
        int countd=0;
        for(int i=0;i<nums.length;i++){
            if(arr[nums[i]]==0){
                countd++;
                arr[nums[i]]=1;
            }
        }
        System.out.println(countd);
        int count=0;
        
        int[] arr2=new int[arr.length];
        for(int i=0;i<nums.length;i++){
            int countn=0;
            if(arr2[nums[i]]==0){
                countn++;
            }
            arr2[nums[i]]++;
            if(countn==countd){
                count++;
            }
            if(nums.length-i<countd){
                break;
            }
            for(int j=i+1;j<nums.length;j++){
                if(arr2[nums[j]]==0){
                    countn++;
                }
                arr2[nums[j]]++;

                if(countn==countd){
                    count++;
                }
            }
            for(int k=0;k<arr2.length;k++){
                arr2[k]=0;
            }
        }
        return count;
    }
}