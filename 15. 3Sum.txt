15. 3Sum
Solved
Medium
Topics
Companies
Hint
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.

Code:

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> list=new ArrayList<>();
        Arrays.sort(nums);
        
        for(int i=0;i<nums.length;i++){
            int s=i+1;
            int t=nums.length-1;
            while(s<t){
                int sum=nums[i]+nums[s]+nums[t];
                if(sum==0){
                    List<Integer> l1=new ArrayList<>();
                    l1.add(nums[i]);
                    l1.add(nums[s]);
                    l1.add(nums[t]);
                    list.add(l1);
                    int se=nums[s];
                    int th=nums[t];

                    while(s<nums.length && nums[s]==se){
                        s++;
                    }

                    while(t>=0 && nums[t]==th){
                        t--;
                    }

                    continue;
                }else if(sum<0){
                    s++;
                }else{
                    t--;
                }
            }
            int f=nums[i];
            while(i<nums.length && nums[i]==f){
                i++;
            }
            i--;
        }
        return list;
    }
}