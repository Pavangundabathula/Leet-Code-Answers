1123. Lowest Common Ancestor of Deepest Leaves
Solved
Medium
Topics
Companies
Hint
Given the root of a binary tree, return the lowest common ancestor of its deepest leaves.

Recall that:

The node of a binary tree is a leaf if and only if it has no children
The depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1.
The lowest common ancestor of a set S of nodes, is the node A with the largest depth such that every node in S is in the subtree with root A.
 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4]
Output: [2,7,4]
Explanation: We return the node with value 2, colored in yellow in the diagram.
The nodes coloured in blue are the deepest leaf-nodes of the tree.
Note that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.
Example 2:

Input: root = [1]
Output: [1]
Explanation: The root is the deepest node in the tree, and it's the lca of itself.
Example 3:

Input: root = [0,1,3,null,2]
Output: [2]
Explanation: The deepest leaf node in the tree is 2, the lca of one node is itself.
 

Code:

class Solution {
    public TreeNode lcaDeepestLeaves(TreeNode root) {
        if(root==null){
            return null;
        }
        int height=height(root);
        System.out.println(height);
        Queue<TreeNode> queue=new LinkedList<>();
        queue.offer(root);
        int count=1;
        while(!queue.isEmpty()&& count!=height){
            int size=queue.size();
            for(int i=0;i<size;i++){
                TreeNode node=queue.poll();
                if(node.left!=null){
                    queue.offer(node.left);
                }
                if(node.right!=null){
                    queue.offer(node.right);
                }
            }
            count++;
        }

        TreeNode first=queue.poll();
        while(queue.size()>1){
            queue.poll();
        }
        TreeNode second=queue.poll();
        if(second==null){
            return first;
        }

        return ancestor(root,first,second);
    }

    public TreeNode ancestor(TreeNode root,TreeNode p,TreeNode q){
        if(root==null){
            return null;
        }

        if(root==p || root==q){
            return root;
        }

        TreeNode left=ancestor(root.left,p,q);
        TreeNode right=ancestor(root.right,p,q);

        if(left!=null && right!=null){
            return root;
        }

        return left==null?right:left;
    }
    public int height(TreeNode root){
        if(root==null){
            return 0;
        }
        if(root.left==null && root.right==null){
            return 1;
        }
        int left=height(root.left);
        int right=height(root.right);
        return Math.max(left,right)+1;
    }
}