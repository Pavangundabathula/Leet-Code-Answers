37. Sudoku Solver
Solved
Hard
Topics
premium lock icon
Companies
Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.

 

Example 1:


Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
Explanation: The input board is shown above and the only valid solution is shown below:


 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit or '.'.
It is guaranteed that the input board has only one solution.

Code:

class Solution {
    public void solveSudoku(char[][] board) {
        solveSudoku(board,0,0);

    }

    public boolean solveSudoku(char[][] board,int row,int col){
        if(row==8 && col==8 && board[row][col]!='.'){
            return true;
        }
        if(row>=9){
            return false;
        }
        if(col>=9){
            return solveSudoku(board,row+1,0);
        }
        if(row<9 && col<9 && board[row][col]!='.'){
            return solveSudoku(board,row,col+1);
        }else if(row<9 && col<9){
            for(char i='1';i<='9';i++){
                if(Checker(board,row,col,i)){
                    board[row][col]=i;
                    if((row==8 && col==8) || solveSudoku(board,row,col+1)){
                        return true;
                    }
                    board[row][col]='.';
                }
            }
        }
        return false;
    }
    public boolean Checker(char[][] board,int row,int col,char num){
        for(int i=0;i<9;i++){
            if(board[row][i]==num || board[i][col]==num){
                return false;
            }
        }
        int nrow=row/3;
        nrow*=3;
        int ncol=col/3;
        ncol*=3;
        for(int i=nrow;i<nrow+3;i++){
            for(int j=ncol;j<ncol+3;j++){
                if(board[i][j]==num){
                    return false;
                }
            }
        }
        return true;
    }
}